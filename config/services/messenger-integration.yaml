services:

    App\MessengerIntegration\Serializer\IntegrationSerializer:
        arguments:
            $bodySerializer: '@App\MessengerIntegration\Serializer\Body\BodySerializerInterface'
            $messengerStampsSerializer: '@App\MessengerIntegration\Serializer\MessengerStamps\MessengerStampsSerializerInterface'
            $integrationStampsSerializer: '@App\MessengerIntegration\Serializer\IntegrationStamps\IntegrationStampsSerializerInterface'
            $logger: '@monolog.logger.integration'
            $schemaIdMapper: '@App\MessengerIntegration\Message\SchemaIdMapperInterface'

    App\MessengerIntegration\Serializer\Body\BodySerializerInterface:
        alias: App\MessengerIntegration\Serializer\Body\JsonMessageBodySerializer

    App\MessengerIntegration\Serializer\Body\JsonMessageBodySerializer:


    App\MessengerIntegration\Serializer\IntegrationStamps\IntegrationStampsSerializerInterface:
        alias: App\MessengerIntegration\Serializer\IntegrationStamps\IntegrationStampsSerializer

    App\MessengerIntegration\Serializer\IntegrationStamps\IntegrationStampsSerializer:

    App\MessengerIntegration\Serializer\MessengerStamps\MessengerStampsSerializerInterface:
        alias: App\MessengerIntegration\Serializer\MessengerStamps\MessengerStampsSerializer

    App\MessengerIntegration\Serializer\MessengerStamps\MessengerStampsSerializer:
        arguments:
            $symfonySerializer: '@serializer'

    # TODO - do we need this?
    App\MessengerIntegration\Inbox\InputInboxService:
        arguments:
            $logger: '@monolog.logger.application'
            $integrationSerializer: '@App\MessengerIntegration\Serializer\IntegrationSerializer'
            $messageBus: '@application_bus'

    # Message magic
    App\MessengerIntegration\Message\SchemaIdMapperInterface:
        alias: App\MessengerIntegration\Message\SchemaIdMapper

    App\MessengerIntegration\Message\SchemaIdMapper:
        tags:
            - { name: 'messenger.integration.schema_id_mapper' }

    App\MessengerIntegration\Message\HttpMessageMapperInterface:
        alias: App\MessengerIntegration\Message\HttpMessageMapper

    App\MessengerIntegration\Message\HttpMessageMapper:
        arguments:
            $prefixMap: # TODO - do it better
                'some_system': 'http://external-api'
                'some_other': 'http://someother.local'
        tags:
            - { name: 'messenger.integration.http_message_mapper' }

    App\MessengerIntegration\Message\KafkaMessageMapperInterface:
        alias: App\MessengerIntegration\Message\KafkaMessageMapper

    App\MessengerIntegration\Message\KafkaMessageMapper:
        tags:
            - { name: 'messenger.integration.kafka_message_mapper' }

    # Middleware
    App\MessengerIntegration\Middleware\NullTransportRouterMiddleware:
        arguments:
            $logger: '@monolog.logger.integration'
            $nullTransport: '@messenger.transport.null_transport'

    App\MessengerIntegration\Middleware\AddSchemaIdMiddleware:
        arguments:
            $logger: '@monolog.logger.integration'
            $schemaIdMapper: '@App\MessengerIntegration\Message\SchemaIdMapperInterface'

    App\MessengerIntegration\Middleware\InboxRouterMiddleware:
        arguments:
            $logger: '@monolog.logger.integration'
            $inboxTransport: '@messenger.transport.inbox_transport'

    App\MessengerIntegration\Middleware\OutboxRouterMiddleware:
        arguments:
            $logger: '@monolog.logger.integration'
            $outboxTransport: '@messenger.transport.outbox_transport'

    App\MessengerIntegration\Middleware\OutgoingHttpRouterMiddleware:
        arguments:
            $logger: '@monolog.logger.integration'
            $httpTransport: '@messenger.transport.http_publisher_transport'
            $httpMessageMapper: '@App\MessengerIntegration\Message\HttpMessageMapperInterface'

    App\MessengerIntegration\Middleware\OutgoingKafkaRouterMiddleware:
        arguments:
            $logger: '@monolog.logger.integration'
            $kafkaTransport: '@messenger.transport.kafka_publisher_transport'
            $kafkaMessageMapper: '@App\MessengerIntegration\Message\KafkaMessageMapperInterface'

    # Transport factories
    App\MessengerIntegration\Transport\Http\IntegrationHttpTransportFactory:
        arguments:
            $schemaIdMapper: '@App\MessengerIntegration\Message\SchemaIdMapperInterface'
            $httpMessageMapper: '@App\MessengerIntegration\Message\HttpMessageMapperInterface'
            $serializer: '@App\MessengerIntegration\Serializer\IntegrationSerializer'
            $httpClientFactory: '@App\MessengerIntegration\Transport\Http\HttpClientFactory'
            $logger: '@monolog.logger.application'
        tags:
            - { name: 'messenger.transport_factory' }

    App\MessengerIntegration\Transport\Kafka\IntegrationKafkaTransportFactory:
        tags:
            - { name: 'messenger.transport_factory' }
        arguments:
            $kafkaFactory: '@App\MessengerIntegration\Transport\Kafka\RdKafkaFactory'
            $logger: '@monolog.logger.application'

    App\MessengerIntegration\Transport\Null\NullTransportFactory:
        tags:
            - { name: 'messenger.transport_factory' }
        arguments:
            $logger: '@monolog.logger.application'

    # Other
    App\MessengerIntegration\Transport\Http\HttpClientFactory:

    App\MessengerIntegration\Transport\Kafka\RdKafkaFactory:
